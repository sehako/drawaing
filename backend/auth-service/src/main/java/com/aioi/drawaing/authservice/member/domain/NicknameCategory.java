package com.aioi.drawaing.authservice.member.domain;

import java.util.Arrays;
import java.util.List;

public enum NicknameCategory {
    ADJECTIVE(Arrays.asList(
            "행복한", "즐거운", "신나는", "멋진", "용감한", "똑똑한", "귀여운", "활발한", "창의적인", "친절한",
            "열정적인", "정직한", "성실한", "유머러스한", "낙천적인", "우아한", "섬세한", "강인한", "온화한", "겸손한",
            "대담한", "영리한", "재치있는", "상냥한", "진실한", "충실한", "신중한", "관대한", "예의바른", "깔끔한",
            "꼼꼼한", "부지런한", "끈기있는", "유연한", "민첩한", "침착한", "세련된", "고상한", "품위있는", "당당한",
            "자신감있는", "매력적인", "카리스마있는", "유능한", "박학다식한", "재능있는", "근면한", "성실한", "정의로운", "순수한",
            "따뜻한", "다정한", "사려깊은", "배려심있는", "존경받는", "존경스러운", "믿음직한", "신뢰하는", "책임감있는", "성숙한",
            "지혜로운", "현명한", "총명한", "영특한", "명석한", "재주많은", "능숙한", "숙련된", "전문적인", "경험많은",
            "노련한", "통찰력있는", "선견지명있는", "선구자적인", "혁신적인", "독창적인", "획기적인", "선도적인", "선진적인", "미래지향적인",
            "진보적인", "개방적인", "포용력있는", "관용적인", "너그러운", "대범한", "여유로운", "느긋한", "평화로운", "조화로운",
            "균형잡힌", "안정된", "차분한", "고요한", "평온한", "담대한", "용기있는", "결단력있는", "의지력강한", "불굴의"
    )),
    NOUN(Arrays.asList(
            "호랑이", "독수리", "사자", "펭귄", "코끼리", "병아리", "족제비", "고양이", "강아지", "토끼",
            "다람쥐", "기린", "원숭이", "판다", "코알라", "캥거루", "고릴라", "치타", "표범", "재규어",
            "늑대", "여우", "곰", "하마", "악어", "거북이", "뱀", "이구아나", "카멜레온", "프레리독",
            "비버", "수달", "해달", "물개", "바다사자", "돌고래", "고래", "상어", "문어", "오징어",
            "랍스터", "게", "새우", "조개", "불가사리", "해파리", "말미잘", "산호", "해마", "가오리",
            "참치", "연어", "금붕어", "잉어", "메기", "피라냐", "전기뱀장어", "가재", "두더지", "고슴도치",
            "스컹크", "미어캣", "라마", "알파카", "낙타", "타조", "펠리컨", "플라밍고", "앵무새", "까마귀",
            "까치", "참새", "제비", "올빼미", "부엉이", "공작", "백조", "황새", "두루미", "닭",
            "키위", "에뮤", "카수아리", "펭귄", "알바트로스", "갈매기", "슬로스", "아르마딜로", "타투", "캐피바라",
            "주머니쥐", "코요테", "퓨마", "스라소니", "순록", "엘크", "물소", "영양", "가젤", "얼룩말"
    ));

    private final List<String> words;

    NicknameCategory(List<String> words) {
        this.words = words;
    }

    public String getWord(long index) {
        return words.get((int) ((index & Long.MAX_VALUE) % words.size()));
    }

    public int size() {
        return words.size();
    }
}
