user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log debug;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    client_max_body_size 50M;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # conf에서 모든 것을 정의하면 필요가 없음
    # include /etc/nginx/conf.d/*.conf;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    map $http_origin $allowed_origin {
        default "";
        "http://localhost:5173" $http_origin;
        "http://localhost:5500" $http_origin;
        "https://www.drawaing.site" $http_origin;
    }

    ssl_certificate /etc/nginx/ssl/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name www.drawaing.site;
        # 모든 HTTP 요청을 HTTPS로 리디렉트
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name www.drawaing.site;

        location /service/actuator/busrefresh {
	        allow 127.0.0.1;
	        deny all;
            proxy_pass http://spring-gateway:8080/actuator/busrefresh;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        location /service/actuator/ {
            rewrite ^/service/(.*) /$1 break;
            allow 127.0.0.1;
            allow 172.17.0.0/16;
            deny all;
            proxy_pass http://spring-gateway:8080/;
        }

        location /service/auth/actuator/ {
            rewrite ^/service/(.*) /$1 break;
            allow 127.0.0.1;
            allow 172.17.0.0/16;
            deny all;
            proxy_pass http://spring-gateway:8080/;
        }

        location /service/game/ {
	    if ($request_method = 'OPTIONS') {
 	    add_header 'Access-Control-Allow-Origin' "$allowed_origin" always;
	    add_header 'Access-Control-Allow-Credentials' 'true' always;
    	    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
	    add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;
	    add_header 'Access-Control-Max-Age' 1728000;
    	    add_header 'Content-Type' 'text/plain charset=UTF-8';
    	    add_header 'Content-Length' 0;
    	    return 204;
	    }
            rewrite ^/service/game/(.*) /$1 break;
            proxy_pass http://spring-game:8081/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;

            # 3. WebSocket 지원
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_read_timeout 3600;
            proxy_send_timeout 3600;

# 응답에 CORS 헤더 포함
    add_header 'Access-Control-Allow-Origin' "$allowed_origin" always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;
        }
    

        location /service/ {
            rewrite ^/service/(.*) /$1 break;
            proxy_pass http://spring-gateway:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        location /grafana/ {
       	    proxy_pass http://grafana:3000;
	        proxy_set_header Host $host;
        }

	    # Proxy Grafana Live WebSocket connections.
      	location /grafana/api/live/ {
            proxy_pass http://grafana:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
        }

        location / {
            root /usr/share/nginx/html;
            index index.html;
            error_page 404 /index.html;
            error_page 403 /index.html;
        }
    }
}
